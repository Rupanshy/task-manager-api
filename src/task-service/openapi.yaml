openapi: 3.0.3
info:
  title: Task Service API
  version: 1.0.0
  description: >
    Developer-focused Task Tracking Backend (Jira-style).  
    Provides CRUD APIs for Projects, Tasks, Comments, and Sprints.  
    All endpoints require Bearer JWT from auth-service.
servers:
  - url: /api
security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Invalid field
        details:
          type: object

    Paginated:
      type: object
      properties:
        items:
          type: array
        total:
          type: integer
          example: 123
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 13

    Project:
      type: object
      required: [name, key]
      properties:
        id:
          type: string
        key:
          type: string
          example: TM
        name:
          type: string
          example: Task Manager
        description:
          type: string
        ownerId:
          type: string
        members:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Task:
      type: object
      required: [title, projectId]
      properties:
        id:
          type: string
        projectId:
          type: string
        title:
          type: string
          example: Implement JWT guard
        description:
          type: string
          example: Add auth middleware to task routes
        type:
          type: string
          enum: [task, bug, story]
        status:
          type: string
          enum: [todo, in_progress, in_review, done]
        priority:
          type: string
          enum: [low, medium, high, critical]
        reporterId:
          type: string
        assigneeId:
          type: string
        labels:
          type: array
          items:
            type: string
        sprintId:
          type: string
        dueDate:
          type: string
          format: date-time
        estimate:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Comment:
      type: object
      required: [body]
      properties:
        id:
          type: string
        taskId:
          type: string
        authorId:
          type: string
        body:
          type: string
          example: Looks good, please add tests
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Sprint:
      type: object
      required: [name, projectId]
      properties:
        id:
          type: string
        projectId:
          type: string
        name:
          type: string
        goal:
          type: string
        status:
          type: string
          enum: [planned, active, closed]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /projects:
    get:
      tags: [Projects]
      summary: List projects
      security: [{ bearerAuth: [] }]
      parameters:
        - name: page
          in: query
          schema: { type: integer, example: 1 }
        - name: limit
          in: query
          schema: { type: integer, example: 10 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Paginated"
    post:
      tags: [Projects]
      summary: Create project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: Get project details
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    patch:
      tags: [Projects]
      summary: Update project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: OK
    delete:
      tags: [Projects]
      summary: Delete project
      responses:
        "204":
          description: No Content

  /projects/{projectId}/tasks:
    get:
      tags: [Tasks]
      summary: List tasks in a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
        - name: status
          in: query
          schema: { type: string }
        - name: priority
          in: query
          schema: { type: string }
        - name: assigneeId
          in: query
          schema: { type: string }
        - name: q
          in: query
          schema: { type: string }
        - name: page
          in: query
          schema: { type: integer, example: 1 }
        - name: limit
          in: query
          schema: { type: integer, example: 10 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Paginated"
    post:
      tags: [Tasks]
      summary: Create task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{taskId}:
    get:
      tags: [Tasks]
      summary: Get task details
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    patch:
      tags: [Tasks]
      summary: Update task
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: OK
    delete:
      tags: [Tasks]
      summary: Delete task
      responses:
        "204":
          description: No Content

  /tasks/{taskId}/comments:
    get:
      tags: [Comments]
      summary: List comments
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Paginated"
    post:
      tags: [Comments]
      summary: Add comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"

  /projects/{projectId}/sprints:
    get:
      tags: [Sprints]
      summary: List sprints for a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Paginated"
    post:
      tags: [Sprints]
      summary: Create sprint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Sprint"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sprint"
